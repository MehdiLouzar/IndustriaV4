// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle User pour l'authentification B2B
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String?
  company     String?
  phone       String?
  role        UserRole @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]
  activities   ActivityLog[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

// Modèle Country
model Country {
  id        String   @id @default(cuid())
  name      String   @unique
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  regions Region[]

  @@map("countries")
}

// Modèle Region
model Region {
  id        String   @id @default(cuid())
  name      String
  code      String
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  zones   Zone[]

  @@unique([countryId, code])
  @@map("regions")
}

model ZoneType {
  id   String @id @default(cuid())
  name String @unique

  zones Zone[]

  @@map("zone_types")
}

// Modèle Zone (Zone Industrielle)
model Zone {
  id          String     @id @default(cuid())
  name        String
  description String?
  address     String?
  totalArea   Float? // en m²
  price       Float? // prix par m²
  status      ZoneStatus @default(AVAILABLE)

  // Coordonnées Lambert du centre (premier point)
  lambertX    Float?
  lambertY    Float?

  // Coordonnées GPS calculées automatiquement depuis Lambert
  latitude    Float?
  longitude   Float?


  // Relations
  zoneTypeId String?
  regionId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  zoneType  ZoneType?    @relation(fields: [zoneTypeId], references: [id], onDelete: SetNull)
  region     Region       @relation(fields: [regionId], references: [id], onDelete: Cascade)
  parcels    Parcel[]
  activities ZoneActivity[]
  amenities  ZoneAmenity[]
  vertices   ZoneVertex[]

  @@map("zones")
}

enum ZoneStatus {
  AVAILABLE
  RESERVED
  OCCUPIED
  SHOWROOM
  PARTIALLY_OCCUPIED
  FULLY_OCCUPIED
  UNDER_DEVELOPMENT
}

// Modèle Parcel (Parcelle)
model Parcel {
  id          String       @id @default(cuid())
  reference   String       @unique
  area        Float // en m²
  price       Float? // prix total ou par m²
  status      ParcelStatus @default(AVAILABLE)
  isFree      Boolean      @default(true)
  isShowroom  Boolean      @default(false)
  cos         Float?
  cus         Float?

  // Coordonnées Lambert du point principal
  lambertX    Float?
  lambertY    Float?
  // Coordonnées GPS calculées automatiquement depuis Lambert
  latitude    Float?
  longitude   Float?

  // Relations
  zoneId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  zone         Zone          @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  amenities    ParcelAmenity[]
  vertices     ParcelVertex[]

  @@map("parcels")
}

enum ParcelStatus {
  AVAILABLE
  RESERVED
  OCCUPIED
  SHOWROOM
}

// Modèle Activity (Type d'activité industrielle)
model Activity {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String? // URL ou nom d'icône
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  zones ZoneActivity[]

  @@map("activities")
}

// Table de liaison Zone-Activity (Many-to-Many)
model ZoneActivity {
  id       String @id @default(cuid())
  zoneId   String
  activityId String

  zone     Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([zoneId, activityId])
  @@map("zone_activities")
}

// Modèle Amenity (Équipements/Services)
model Amenity {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  category    String? // Infrastructure, Services, Transport, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  zones   ZoneAmenity[]
  parcels ParcelAmenity[]

  @@map("amenities")
}

// Table de liaison Zone-Amenity
model ZoneAmenity {
  id        String @id @default(cuid())
  zoneId    String
  amenityId String

  zone    Zone    @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  amenity Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@unique([zoneId, amenityId])
  @@map("zone_amenities")
}

// Table de liaison Parcel-Amenity
model ParcelAmenity {
  id        String @id @default(cuid())
  parcelId  String
  amenityId String

  parcel  Parcel  @relation(fields: [parcelId], references: [id], onDelete: Cascade)
  amenity Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@unique([parcelId, amenityId])
  @@map("parcel_amenities")
}

// Modèle Appointment (Rendez-vous)
model Appointment {
  id              String            @id @default(cuid())

  // Informations client
  contactName     String
  contactEmail    String
  contactPhone    String?
  companyName     String?
  message         String?

  // Informations RDV
  requestedDate   DateTime?
  confirmedDate   DateTime?
  status          AppointmentStatus @default(PENDING)

  // Relations
  parcelId        String?
  userId          String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  parcel Parcel? @relation(fields: [parcelId], references: [id], onDelete: SetNull)
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("appointments")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

// Modèle ActivityLog (Journal d'activités)
model ActivityLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String // CREATE, UPDATE, DELETE, LOGIN, etc.
  entity      String // Zone, Parcel, Appointment, etc.
  entityId    String?
  description String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
}

model ZoneVertex {
  id       Int    @id @default(autoincrement())
  zoneId   String
  seq      Int
  lambertX Float
  lambertY Float

  zone Zone @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@unique([zoneId, seq])
  @@map("zone_vertices")
}

model ParcelVertex {
  id       Int    @id @default(autoincrement())
  parcelId String
  seq      Int
  lambertX Float
  lambertY Float

  parcel Parcel @relation(fields: [parcelId], references: [id], onDelete: Cascade)

  @@unique([parcelId, seq])
  @@map("parcel_vertices")
}