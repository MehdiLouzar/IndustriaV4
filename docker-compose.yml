
services:
  db:
    image: postgis/postgis:16-3.4
    container_name: industria-db
    environment:
      POSTGRES_DB: industria
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - industria-network

  keycloak:
    build:
      context: ./keycloak
      dockerfile: Dockerfile
    image: quay.io/keycloak/keycloak:24.0.3
    container_name: keycloak
    command: start-dev --import-realm
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://db:5432/industria
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_STRICT: "false"
      KC_HTTP_ENABLED: "true"
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
      - ./keycloak/import-users-and-roles.sh:/opt/keycloak/data/import/import-users-and-roles.sh:ro
    ports:
      - "8081:8080"
    depends_on:
      - db
    networks:
      - industria-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: industria-backend
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/industria
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      SPRING_JPA_SHOW_SQL: true
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/industria
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_INDUSTRIA: DEBUG
      LOGGING_LEVEL_ORG_HIBERNATE_SQL: DEBUG
    restart: unless-stopped
    depends_on:
      - db
      - keycloak
    networks:
      - industria-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 120s

  db-init:
    image: postgres:16
    container_name: industria-db-init
    environment:
      PGPASSWORD: postgres
    volumes:
      - ./backend/db/init/initDB.sql:/init/initDB.sql:ro
      - ./scripts/wait-for-tables.sh:/wait-for-tables.sh:ro
    depends_on:
      - backend
    networks:
      - industria-network
    command: >
      sh -c "
        chmod +x /wait-for-tables.sh &&
        /wait-for-tables.sh &&
        echo 'Initializing database with sample data...' &&
        psql -h db -U postgres -d industria -f /init/initDB.sql &&
        echo 'Database initialization completed!'
      "
    restart: "no"

  frontend:
    build:
      context: ./Front-End
      dockerfile: Dockerfile
    container_name: industria-frontend
    volumes:
      - ./Front-End:/app
      - /app/node_modules
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - API_INTERNAL_URL=http://backend:8080
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=supersecretkey123456789
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=industria
      - KEYCLOAK_CLIENT_ID=frontend
    restart: unless-stopped
    depends_on:
      - backend
      - db-init
    command: >
      sh -c "
        echo 'Installing dependencies...' &&
        bun install &&
        echo 'Starting development server...' &&
        bun run dev --hostname 0.0.0.0
      "
    networks:
      - industria-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

networks:
  industria-network:
    driver: bridge

volumes:
  db_data:
  frontend_node_modules:
