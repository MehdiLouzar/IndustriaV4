@echo off
setlocal enabledelayedexpansion

echo.
echo ===============================================
echo üöÄ D√©marrage de l'environnement Industria
echo ===============================================
echo.

rem V√©rification de Docker
docker --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Docker n'est pas install√© ou non accessible
    echo    Veuillez installer Docker Desktop et r√©essayer
    pause
    exit /b 1
)

docker compose version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Docker Compose n'est pas install√© ou non accessible
    pause
    exit /b 1
)

echo ‚úÖ Docker et Docker Compose d√©tect√©s

echo.
echo üßπ Nettoyage des conteneurs existants...
docker compose down -v --remove-orphans

echo.
echo üî® Construction et d√©marrage des services...
docker compose up --build -d

echo.
echo ‚è≥ Attente de PostgreSQL...

:wait_postgres
docker compose exec -T db pg_isready -U postgres >nul 2>&1
if errorlevel 1 (
    timeout /t 2 /nobreak >nul
    goto wait_postgres
)
echo ‚úÖ PostgreSQL est pr√™t !

echo.
echo üë§ Importation des utilisateurs dans Keycloak...
docker compose exec keycloak bash /opt/keycloak/data/import/import-users-and-roles.sh
if errorlevel 1 (
    echo ‚ùå √âchec de l'import des utilisateurs et r√¥les
    echo üìú V√©rifiez les logs de Keycloak avec : docker compose logs keycloak
) else (
    echo ‚úÖ Importation des utilisateurs r√©ussie !
)

echo.
echo ‚è≥ Attente du Backend (cr√©ation des tables en cours...)
set max_backend_attempts=120
set backend_attempt=1

:wait_backend_loop
curl -sf "http://localhost:8080/actuator/health" >nul 2>&1
if not errorlevel 1 (
    echo ‚úÖ Backend est pr√™t !
    goto backend_ready
)

if %backend_attempt% geq %max_backend_attempts% (
    echo ‚ùå Timeout: Backend n'est pas disponible
    echo üìú Logs du Backend :
    docker compose logs backend
    goto show_final_status
)

echo    Tentative %backend_attempt%/%max_backend_attempts% - Hibernate en cours de cr√©ation des tables...
timeout /t 5 /nobreak >nul
set /a backend_attempt+=1
goto wait_backend_loop

:backend_ready

echo.
echo ‚è≥ Attente de l'initialisation des donn√©es...

:wait_db_init
for /f "tokens=*" %%i in ('docker compose ps db-init --format "{{.Status}}"') do set db_init_status=%%i
echo !db_init_status! | findstr /i "running" >nul
if not errorlevel 1 (
    timeout /t 3 /nobreak >nul
    goto wait_db_init
)

echo !db_init_status! | findstr /i "exited (0)" >nul
if not errorlevel 1 (
    echo ‚úÖ Initialisation des donn√©es termin√©e avec succ√®s !
) else (
    echo ‚ùå Probl√®me lors de l'initialisation des donn√©es
    echo üìú Logs de l'initialisation :
    docker compose logs db-init
)

echo.
echo üîç V√©rification finale des services :
for %%s in (db keycloak backend frontend) do (
    for /f "tokens=*" %%i in ('docker compose ps %%s --format "{{.Status}}"') do (
        echo %%i | findstr /i "up" >nul
        if not errorlevel 1 (
            echo    ‚úÖ %%s : En ligne
        ) else (
            echo    ‚ùå %%s : Probl√®me - %%i
        )
    )
)

echo.
echo ===============================================
echo üéâ Environnement Industria d√©marr√© !
echo ===============================================
echo.
echo üìã Services disponibles :
echo    ‚Ä¢ Frontend:  http://localhost:3000
echo    ‚Ä¢ Backend:   http://localhost:8080
echo    ‚Ä¢ Keycloak:  http://localhost:8081
echo    ‚Ä¢ Database:  localhost:5432
echo.
echo üë§ Comptes de test :
echo    ‚Ä¢ Admin:    admin@zonespro.ma / password123
echo    ‚Ä¢ Manager:  manager@zonespro.ma / password123
echo    ‚Ä¢ User:     demo@entreprise.ma / password123
echo.
echo üîß Commandes utiles :
echo    ‚Ä¢ Voir les logs:     docker compose logs -f [service]
echo    ‚Ä¢ Arr√™ter:          docker compose down
echo    ‚Ä¢ Red√©marrer:       docker compose restart [service]
echo    ‚Ä¢ R√©initialiser:    docker compose down -v

endlocal
